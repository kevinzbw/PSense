//skipped
def makePoly(as: R[], x, order){
        sum := 0;
        for i in [0..4){
                if(i <= order){sum += as[i]*(x^i);}
        }
        return sum;
}

observedData := [[-4,69.76636938284166], [-3,36.63586217969598], [-2,19.95244368751754], [-1,4.819485497724985], [0,4.027631414787425], [1,3.755022418210824], [2,6.557548104903805], [3,23.922485493795072], [4,50.69924692420815]];

def post(){
        coeffs := array(4, gauss(0,2));
        order := categorical([0.25,0.25,0.25,0.25]);
        for j in [0..9){
                cobserve(gauss(makePoly(coeffs,observedData[j][0],order+ 1),4), observedData[j][1]);
        }
        // return order;
        return coeffs[0];
        // return coeffs[1];
        // return coeffs[2];
        // return coeffs[3];
}


def main(){
        return post(); //expected: (1/2048·e^(-12095/8·r₁²+-1969376508056913111390382714178627/1600000000000000000000000000000+496591025207125733/2000000000000000·r₁)·⅟8^(3/2)+1/4096·e^(-1969376508056913111390382714178627/1600000000000000000000000000000+-71/8·r₁²+38936610483353523/2000000000000000·r₁)·⅟8^(3/2)+1/4096·e^(-1969376508056913111390382714178627/1600000000000000000000000000000+-899/8·r₁²+2664962686026544663/4000000000000000·r₁)·⅟8^(3/2))·⅟(1/2048·⅟8^(3/2)·⅟e^(118111633739476763670727019762869318669/96760000000000000000000000000000000)·⅟π^(9/2)·√8̅/̅1̅2̅0̅9̅5̅+1/4096·⅟8^(3/2)·⅟e^(437580321450502191721044011274786199/1798000000000000000000000000000000)·⅟π^(9/2)·√8̅/̅8̅9̅9̅+1/4096·⅟8^(3/2)·⅟e^(693064421816474572671647110747366469/568000000000000000000000000000000)·⅟π^(9/2)·√8̅/̅7̅1̅)·⅟π⁵
}
