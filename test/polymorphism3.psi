
arrayLength := 3; // TODO: make unnecessary

def map[a,b](lambda: a → b){
    return (arr: a[]){
        result := ([]:b[]);
        for i in [0..arrayLength){
            result ~= [lambda(arr[i])];
        }
        return result;
    }
}

def cat2[a](x:a[]){
    return x~x;
}

def main(){
    r:=map((x)=>x+1)([1,2,3]);
    t:=map((x:ℝ×ℝ[])=>x[1]~[x[0]])([(0,r),(1,r),(2,r)]);
    s:=cat2([1,2]);
    return (r[0],r[1],r[2],t[0][3],t[1][3],s[0],s[1],s[2],s[3]); // expected: δ[-r₁+2]·δ[-r₂+3]·δ[-r₃+4]·δ[-r₅+1]·δ[-r₆+1]·δ[-r₇+2]·δ[-r₈+1]·δ[-r₉+2]·δ[r₄]
}
